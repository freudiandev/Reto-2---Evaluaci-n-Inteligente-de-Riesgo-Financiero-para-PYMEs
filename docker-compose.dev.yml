# Docker Compose para Desarrollo Local
# Simula un entorno de servidor completo GRATUITO
version: '3.8'

services:
  # Backend Python/FastAPI
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: pymes-backend-dev
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./backend/database:/app/database
      - ./backend/uploads:/app/uploads
    environment:
      - DATABASE_URL=sqlite:///./database/pymes_risk.db
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - ENVIRONMENT=development
      - PYTHONPATH=/app
    command: python main.py
    restart: unless-stopped
    networks:
      - pymes-network

  # Frontend React/Vite
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: pymes-frontend-dev
    ports:
      - "3000:3000"
      - "5173:5173"  # Vite dev server
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000/api/v1
      - CHOKIDAR_USEPOLLING=true
    command: npm run dev -- --host 0.0.0.0 --port 5173
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - pymes-network

  # Base de datos PostgreSQL (opcional, mejor que SQLite)
  database:
    image: postgres:13-alpine
    container_name: pymes-db-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=pymes_risk
      - POSTGRES_USER=pymes_user
      - POSTGRES_PASSWORD=pymes_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - pymes-network

  # Redis para cache (opcional)
  redis:
    image: redis:6-alpine
    container_name: pymes-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - pymes-network

  # Nginx como proxy (simula servidor web)
  nginx:
    image: nginx:alpine
    container_name: pymes-nginx-dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - pymes-network

  # Adminer para gesti√≥n de BD (como phpMyAdmin)
  adminer:
    image: adminer
    container_name: pymes-adminer-dev
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=database
    depends_on:
      - database
    restart: unless-stopped
    networks:
      - pymes-network

volumes:
  postgres_data:
  redis_data:

networks:
  pymes-network:
    driver: bridge
